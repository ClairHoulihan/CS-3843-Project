// DecryptData.cpp
//
// THis file uses the input data and key information to decrypt the input data
//

#include "Main.h"

//////////////////////////////////////////////////////////////////////////////////////////////////
// code to decrypt the data as specified by the project assignment
int decryptData(char *data, int dataLength)
{
	int resulti = 0;

	gdebug1 = 0;					// a couple of global variables that could be used for debugging
	gdebug2 = 0;					// also can have a breakpoint in C code

	// You can not declare any local variables in C, but should use resulti to indicate any errors
	// Set up the stack frame and assign variables in assembly if you need to do so
	// access the parameters BEFORE setting up your own stack frame
	// Also, you cannot use a lot of global variables - work with registers

	__asm {
		// you will need to reference some of these global variables
		// (gptrPasswordHash or gPasswordHash), (gptrKey or gkey), gNumRounds

		// simple example that xors 2nd byte of data with 14th byte in the key file

		sub esp, 32 // Save space for variables in the stack

		mov esi, data // Copy the data into the esi register

		mov ecx, gNumRounds
		dec ecx
		mov [esp + 4], ecx // [esp + 4] is where we will store the rounds

		// Starting point will be [esp + 8]

		lea edx, gPasswordHash
		mov [esp + 12], edx // [edx + 12] is where we will store the gPasswordHash

		// HopCount will be [esp + 16]

		mov ebx, 0
		mov [esp + 20], ebx // [esp + 20] is where we will store the index

		lea ebx, gkey
		mov [esp + 24], ebx // [esp + 24] is where we will store the gkey

		lea ebx, gDecodeTable
		mov [esp + 28], ebx // [esp + 28] is where we will store the gDecodeTable

		xor ecx, ecx
		mov[esp + 32], ecx // position in loop of dataLength will be [esp + 32]

//*

	firstNext:
		xor ebx, ebx
		xor eax, eax
		xor edx, edx

		mov ecx, [esp + 4] // [esp + 4] is where we stored the # of rounds
		mov edi, [esp + 12] // [esp + 12] is where we stored the gPasswordHash



		mov bh, byte ptr[edi + ecx * 4]
		mov bl, byte ptr[1 + edi + ecx * 4]

		mov[esp + 8], ebx // [esp + 8] is the starting point



		xor ebx, ebx
		xor eax, eax
		xor edx, edx

		mov bh, byte ptr[2 + edi + ecx * 4]
		mov bl, byte ptr[3 + edi + ecx * 4]

		mov[esp + 16], ebx // [esp + 16] is the hop count



		cmp ebx, 0
		jne isNotZero // if(hop_count == 0)
		mov ebx, 0xFFFF
		mov[esp + 16], ebx // hop_count = 0xFFFF

	isNotZero:

//*/

//*
		mov edx, [esp + 8] // [esp + 8] is where we stored our starting point
		mov [esp + 20], edx // [esp + 20] is where we stored our index 

//*/

		xor ecx, ecx
		mov [esp + 32], ecx // [esp + 32] is where we are storing the datalength

//*

	next: // This is where we begin the second loop (for( x = 0; x < fileLength(input_file); x++) { )

		mov al, byte ptr[esi + ecx] // Copies the value stored at what [esi + ecx] is pointing at



		// C: Reverse the order of the bits
//*
			xor dl, dl

			mov dh, al
			and dh, 0x80
			shr dh, 7
			or dl, dh

			mov dh, al
			and dh, 0x40
			shr dh, 5
			or dl, dh

			mov dh, al
			and dh, 0x20
			shr dh, 3
			or dl, dh

			mov dh, al
			and dh, 0x10
			shr dh, 1
			or dl, dh

			mov dh, al
			and dh, 0x08
			shl dh, 1
			or dl, dh

			mov dh, al
			and dh, 0x04
			shl dh, 3
			or dl, dh

			mov dh, al
			and dh, 0x02
			shl dh, 5
			or dl, dh

			mov dh, al
			and dh, 0x01
			shl dh, 7
			or dl, dh

			mov al, dl
			/* Here we copy the value of al into dh and clear the dl and ah registers. We then go into a loop where we rotate out the bits in dh, while
			placing those bits backwards into dl. We do this 8 times for all bits */
//*/
		
		// E: Decode using the table
//*
		mov ebx, [esp + 28] // [esp + 28] is where we stored the gDecodeTable
		movzx eax, al
		mov al, [ebx + eax]
		/* This code simply calls the decode table that we stored in ebx (we use eax because you cannot use a lower bit register to call the decode table) */
//*/

		// D: Rotate nibbles back in place
//*
		xor ah, ah

		mov dh, al
		mov dl, al
		and dh, 0xF0
		and dl, 0x0F
		shr dh, 1
		shl dl, 1
		
		mov ah, dh
		and ah, 0x08
		shl ah, 4
		and dh, 0xF0
		or dh, ah

		mov ah, dl
		and ah, 0x10
		shr ah, 4
		and dl, 0x0F
		or dl, ah

		or dh, dl

		mov al, dh		
		/* This code rearranges the registers dl and dh to put the nibbles in the correct order by using and to clear what we do not want.
		It then shifts the nibbles to there correct position */
//*/

		// B: Rotate 4 bits to the right
//*
		mov dl, al
		shl al, 4
		shr dl, 4
		or al, dl
		/* This code will copy data into the lower 8 bit register of edx and shift al to the left by 4, and shift dl to the left by 4. It then ors al by dl */
//*/
		
		// A: Rotate 1 bit to the right
//*
		ror al, 1
		/* This code simply rotates the msb (most significant bit) to where the lsb (least significant bit) is */
//*/

//*
		mov edx, [esp + 20] // [esp + 20] is where we sotred our index 
		mov ebx, [esp + 24] // [esp + 24] is where we stored the gkey
		xor eax, [ebx + edx] // xor *data with gKey[index] (file[x] = file[x] ^ keyfile[index];)

		mov ebx, [esp + 16] // [esp + 16] is where we stored the hopCount
		add edx, ebx // (index += hop_count(round);)

		cmp edx, 65537
		jl noReduce
		sub edx, 65537 // (if(index >= 65537) index -= 65537)
	noReduce:
		mov[esp + 20], edx
//*/

		mov ecx, [esp + 32]
		mov [esi + ecx], al // Move al back into the data it was copied from
		inc ecx
		mov [esp + 32], ecx
		cmp ecx, dataLength
		jne next
		/* The ecx register is incremented and compared to the dataLength. It then loops through if ecx does not equal dataLength */
//*/

//*

		mov ecx, [esp + 4] // [esp + 4] is where we stored the rounds
		dec ecx
		mov[esp + 4], ecx
		cmp ecx, 0xffffffff
		jne firstNext
		/* The ecx register is set to the number of rounds and decremented here */
//*/


/*
		mov eax, data
		xor ecx, ecx
		next :
		xor[eax + ecx], 1
			inc ecx
			cmp ecx, dataLength
			jb next
//*/


/*
		lea esi,gkey				// put the ADDRESS of gkey into esi
		mov esi,gptrKey;			// put the ADDRESS of gkey into esi (since *gptrKey = gkey)

		lea	esi,gPasswordHash		// put ADDRESS of gPasswordHash into esi
		mov esi,gptrPasswordHash	// put ADDRESS of gPasswordHash into esi (since unsigned char *gptrPasswordHash = gPasswordHash)

		mov al,byte ptr [esi]				// get first byte of password hash
		mov al,byte ptr [esi+4]				// get 5th byte of password hash
		mov ebx,2
		mov al,byte ptr [esi+ebx]			// get 3rd byte of password hash
		mov al,byte ptr [esi+ebx*2]			// get 5th byte of password hash

		mov ax,word ptr [esi+ebx*2]			// gets 5th and 6th bytes of password hash ( gPasswordHash[4] and gPasswordHash[5] ) into ax
		mov eax,dword ptr [esi+ebx*2]		// gets 4 bytes, as in:  unsigned int X = *( (unsigned int*) &gPasswordHash[4] );

		mov al,byte ptr [gkey+ebx]			// get's 3rd byte of gkey[] data

		mov al,byte ptr [gptrKey+ebx]		// THIS IS INCORRECT - will add the address of the gptrKey global variable (NOT the value that gptrKey holds)

		mov al,byte ptr [esi+0xd];			// access 14th byte in gkey[]: 0, 1, 2 ... d is the 14th byte
		mov edi,data				// Put ADDRESS of first data element into edi
		xor byte ptr [edi+1],al		// Exclusive-or the 2nd byte of data with the 14th element of the keyfile
									// NOTE: Keyfile[14] = 0x21, that value changes the case of a letter and flips the LSB
									// Lowercase "c" = 0x63 becomes capital "B" since 0x63 xor 0x21 = 0x42
//*/

		add esp, 32 // Fix the stack to where it was before our call
									
									}

	return resulti;
} // decryptData

